const { Knex } = require('knex');

/**
 * @param {import("knex").Knex} knex
 * @returns {Promise<void>}
 */
exports.up = function (knex) {
  return knex.raw(`
    CREATE EXTENSION IF NOT EXISTS citext;

    CREATE DOMAIN email AS citext
    CHECK (
      VALUE ~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'
    );

    CREATE TABLE provider (
      id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      name TEXT NOT NULL,
      email email NOT NULL UNIQUE
    );

    CREATE TABLE customer (
      id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      name TEXT NOT NULL,
      email email NOT NULL UNIQUE
    );

    CREATE TABLE service_type (
      id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      name TEXT NOT NULL,
      description TEXT NOT NULL
    );

    CREATE EXTENSION IF NOT EXISTS btree_gist;

    CREATE TABLE booking (
      id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      customer_id INT NOT NULL REFERENCES customer(id) ON DELETE CASCADE,
      provider_id INT NOT NULL REFERENCES provider(id) ON DELETE CASCADE,
      during TSRANGE NOT NULL,
      EXCLUDE USING gist (provider_id WITH =, during WITH &&)
    );

    COMMENT ON TABLE booking IS 'Represents a booking made by a given customer, for a given provider. Guaranteed to not overlap with other bookings';
    COMMENT ON COLUMN booking.during IS 'Time of the booking';

    CREATE INDEX booking_customer_id_idx ON booking (customer_id);
    CREATE INDEX booking_provider_id_idx ON booking (provider_id);
  `);
};

/**
 * @param {import("knex").Knex} knex
 * @returns {Promise<void>}
 */
exports.down = function (knex) {
  return knex.raw(`
    DROP INDEX booking_customer_id_idx;
    DROP INDEX booking_provider_id_idx;
    DROP TABLE booking;
    DROP EXTENSION btree_gist;
    DROP TABLE customer;
    DROP TABLE provider;
    DROP TABLE service_type;
    DROP DOMAIN email;
    DROP EXTENSION citext;

  `);
};
